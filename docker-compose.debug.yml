version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: documentsearcher
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=128MB
      -c idle_in_transaction_session_timeout=30000
      -c tcp_keepalives_idle=600
      -c tcp_keepalives_interval=30
      -c tcp_keepalives_count=3
      -c log_min_duration_statement=-1
      -c log_connections=off
      -c log_disconnections=off
      -c log_statement=none
      -c log_min_messages=error
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 10s
      retries: 3
    logging:
      driver: "none"

  app:
    build:
      context: .
      dockerfile: Dockerfile.debug
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/documentsearcher
      DEBUG: "true"
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - .:/app
      - /app/__pycache__  # Exclude pycache
    command: >
      sh -c "
        echo 'Ожидание готовности базы данных...' &&
        until pg_isready -h db -U postgres; do
          echo 'PostgreSQL недоступен - ждем...'
          sleep 1
        done &&
        
        # Применяем миграции
        if ! alembic current | grep -q 'head'; then
          echo 'Применение миграций Alembic...' &&
          alembic upgrade head &&
          echo 'Миграции успешно применены!'
        else
          echo 'Миграции уже применены, пропускаем...'
        fi &&
        echo 'Запуск приложения в режиме отладки...' &&
        echo 'Отладочный сервер запущен на порту 5678. Ожидание подключения...' &&
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

volumes:
  postgres_data:
